#!/bin/bash

## Copyright (C) 2024 - 2025 ENCRYPTED SUPPORT LLC <adrelanos@whonix.org>
## See the file COPYING for copying conditions.

window_manager_list=(
   '/usr/bin/xfwm4'
   # Add other window managers here later
)
selected_window_manager=''
for window_manager in "${window_manager_list[@]}"; do
   if [ -e "${window_manager}" ]; then
      selected_window_manager="${window_manager}"
      break
   fi
done

sysmaint_app_list=(
  '/usr/bin/sysmaint-panel'
  '/usr/bin/x-terminal-emulator'
)
selected_sysmaint_app=''
for sysmaint_app in "${sysmaint_app_list[@]}"; do
   if [ -e "${sysmaint_app}" ]; then
      selected_sysmaint_app="${sysmaint_app}"
      break
   fi
done

# The polkit agent isn't started by systemd, but is rather usually run as a
# non-root user by way of /etc/xdg/autostart. Running everything in
# /etc/xdg/autostart would be bad here because sysmaint's graphical session is
# intentionally running as few services as possible to keep attack surface
# low. At the same time there's no robust way to pick out just the polkit
# agent from /etc/xdg/autostart, so we have to hardcode them. One enhancement
# might be to hardcode a whole list of agents and then only start the one we
# find listed in /etc/xdg/autostart (assuming there's only one of them), but
# for now this works well. When this script gains support for window managers
# beyond xfwm4, expanding our polkit agent support may be a good idea.
#
# Turns out we also need msgcollector, which has to be started the same way.
background_process_list=(
  '/usr/lib/policykit-1-gnome/polkit-gnome-authentication-agent-1'
  '/usr/libexec/msgcollector/msgdispatcher_xdg_autostart'
  '/usr/share/xscreensaver/xscreensaver-wrapper.sh'
)
background_process_args_list=(
  ''
  ''
  '-no-splash'
)

dbus-update-activation-environment --systemd --all

"${selected_window_manager}" &
# Needed to prevent window ordering problems
sleep 1;
"${selected_sysmaint_app}" &
for (( i = 0; i < ${#background_process_list[@]}; i++ )); do
  background_process="${background_process_list[i]}"
  background_process_args="${background_process_args_list[i]}"
  if [ -e "${background_process}" ]; then
    "${background_process}" $background_process_args &
  fi
done

sleep infinity
